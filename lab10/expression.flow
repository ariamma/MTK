import rational;

export {
    BinaryOp ::= AddOp, SubOp, MulOp, DivOp;
    AddOp : ();
    SubOp : ();
    MulOp : ();
    DivOp : ();

    Exp ::= Const, Int, Var, Neg, Binary;
    Int : (i : int);
    Const : (q : Rational);
    Var : (name: string);
    Neg : (e: Exp);
    Binary : (l : Exp, r : Exp, op : BinaryOp);

    add(l: Exp, r: Exp) -> Exp;
    sub(l: Exp, r: Exp) -> Exp;
    mul(l: Exp, r: Exp) -> Exp;
    div(l: Exp, r: Exp) -> Exp;

    exp2s(e: Exp) -> string;
    getValue(e: Exp) -> Rational;
    getSize(e: Exp) -> int;


    ExpressionsSet : (elements: [Exp], elementsSize: int, currentElementIndex: ref int);

    makeExpressionsSet(elements: [Exp]) -> ExpressionsSet;

    makeExpressionsSet1(element: Exp) -> ExpressionsSet;

    getElement(es: ExpressionsSet, index: int) -> Exp;

    getFirstElement(es: ExpressionsSet) -> Exp;

    getCurrentElement(es: ExpressionsSet) -> Exp;

    hasNextElement(es: ExpressionsSet) -> bool;

    tryToAppendElement(es: ExpressionsSet, element: Exp) -> ExpressionsSet;
}

makeExpressionsSet(elements: [Exp]) -> ExpressionsSet {
    fold(tail(elements), makeExpressionsSet1(elements[0]), tryToAppendElement);
}

makeExpressionsSet1(element: Exp) -> ExpressionsSet {
    ExpressionsSet([element], getSize(element), ref 0);
}

getElement(es: ExpressionsSet, index: int) -> Exp {
    es.elements[index];
}

getFirstElement(es: ExpressionsSet) -> Exp {
    getElement(es, 0);
}

getCurrentElement(es: ExpressionsSet) -> Exp {
    result = getElement(es, ^(es.currentElementIndex));
    es.currentElementIndex := ^(es.currentElementIndex) + 1;
    result;
}

hasNextElement(es: ExpressionsSet) -> bool {
    ^(es.currentElementIndex) < length(es.elements);
}

tryToAppendElement(es: ExpressionsSet, element: Exp) -> ExpressionsSet {
    newElementSize = getSize(element);    

    if (newElementSize < es.elementsSize) {
        makeExpressionsSet1(element);
    } else if (newElementSize == es.elementsSize && !contains(es.elements, element)) {
        ExpressionsSet(arrayPush(es.elements, element), newElementSize, es.currentElementIndex);
    } else {
        es;
    }
}

add(l: Exp, r: Exp) -> Exp {
    Binary(l, r, AddOp());
}

sub(l: Exp, r: Exp) -> Exp {
    Binary(l, r, SubOp());
}

mul(l: Exp, r: Exp) -> Exp {
    Binary(l, r, MulOp());
}

div(l: Exp, r: Exp) -> Exp {
    Binary(l, r, DivOp());
}

exp2s(e: Exp) -> string {
    switch(e) {
        Int(i): i2s(i);
        Const(q): rat2s(q);
        Var(name): name;
        Neg(e1): "-" + exp2s(e1);
        Binary(l, r, op): {
            lRepr: string = exp2s(l);
            rRepr: string = exp2s(r);
            "(" + switch(op) {
                AddOp(): lRepr + " + " + rRepr;
                SubOp(): lRepr + " - " + rRepr;
                MulOp(): lRepr + " * " + rRepr;
                DivOp(): lRepr + " / " + rRepr;
            } + ")";
        }
    }
}

getValue(e: Exp) -> Rational {
    switch(e) {
        Int(i): int2rat(i);
        Const(q): q;
        Var(name): nan();
        Neg(e1): mulRationals(int2rat(-1), getValue(e1));
        Binary(l, r, op): {
            lValue: Rational = getValue(l);
            rValue: Rational = getValue(r);
            switch(op) {
                AddOp(): sumRationals(lValue, rValue);
                SubOp(): subRationals(lValue, rValue);
                MulOp(): mulRationals(lValue, rValue);
                DivOp(): divRationals(lValue, rValue);
            };
        }
    }
}

getSize(e: Exp) -> int {
    switch(e) {
        Neg(e1): getSize(e1) + 1;
        Binary(l, r, op): getSize(l) + getSize(r) + 1;
        default: 1;
    }
}